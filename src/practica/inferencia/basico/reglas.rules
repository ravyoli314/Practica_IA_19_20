// **RECUERDA** PRIORIDAD EN FUNCI�N DEL ORDEN DE LAS REGLAS (LA SUPERIOR LA M�S PRIORITARIA)

// Un bloquecito de estos por cada regla (ejemplos de reglas: cogerHerram, iralAlmacen, moverse...)


rule comenzarTarea{ // por lo menos un trabajador libre CON la herramienta necesaria
	declarations
    practica.objetos.Tarea tarea1;
    practica.objetos.Trabajador t1;
  preconditions
    tarea1.getUnidades() > 0; 		// tarea pendiente 
    t1.getTiempoOcupado() == 0; // trabajador libre
    t1.herramientaCorrecta(tarea1.getTipo()); // el trabajador tiene en mano la herramienta necesaria
  actions
 	t1.tiempoTarea(tarea1.getTipo(), tarea1.getUnidades()); // trabajador ocupado el tiempo que requiera la tarea
 	t1.setArea(tarea1.getArea()); // le mando al area de la tarea (este metodo le añade el tiempo de desplazamiento)
 	modified(t1); // necesario para que el motor pueda seguir utilizando los objetos modificados
	tarea1.setUnidades(0);
	modified(tarea1);
	t1.printTrabajador();
	t1.getHerramienta().printHerramienta();
}


rule cogerHerramienta{ // por lo menos un trabajador libre que tiene que coger otra herramienta para la siguiente tarea
	declarations
    practica.objetos.Tarea tarea1;
    practica.objetos.Trabajador t1;
	practica.objetos.Herramienta h1;
  preconditions
    tarea1.getUnidades() > 0; 		// tarea pendiente 
    t1.getTiempoOcupado() == 0; // trabajador libre
    h1.getTrabajo().equals(tarea1.getTipo()); // Herramienta acorde con la tarea a realizar
    !t1.herramientaCorrecta(tarea1.getTipo()); // este metodo devuelve false si la herramienta es nula o si no es la indicada para la tarea
  actions
 	t1.cogerHerramienta(h1); // este metodo tambien desplaza al trabajador al almacen (si no esta ya alli)
 	modified(t1);
 	t1.printTrabajador();
	t1.getHerramienta().printHerramienta();
}

rule actualizarTiempo{ // cuando están todos ocupados, hace pasar el tiempo del/los que termina primero (dejandolo libre y disminuyendo el tiempo de ocupacion restante de los demas) 
	declarations
    practica.objetos.Trabajador t1;
    practica.objetos.Trabajador t2;
    practica.objetos.Trabajador t3;
    practica.objetos.Trabajador t4;
  preconditions
  	!t1.getNombre().equals(t2.getNombre());
  	!t1.getNombre().equals(t3.getNombre());
  	!t1.getNombre().equals(t4.getNombre());
  	!t2.getNombre().equals(t3.getNombre());
  	!t2.getNombre().equals(t4.getNombre());
  	!t3.getNombre().equals(t4.getNombre());
    t1.getTiempoOcupado() > 0; // TODOS OCUPADOS, hallo el que termina primero (t1)
	t1.getTiempoOcupado() <= t2.getTiempoOcupado();
	t1.getTiempoOcupado() <= t3.getTiempoOcupado();
	t1.getTiempoOcupado() <= t4.getTiempoOcupado();
  actions
 	t2.disminuirTiempoOcupado(t1.getTiempoOcupado());
 	t3.disminuirTiempoOcupado(t1.getTiempoOcupado());
 	t4.disminuirTiempoOcupado(t1.getTiempoOcupado());
 	t1.disminuirTiempoOcupado(t1.getTiempoOcupado());
 	modified(t1);
 	modified(t2);
	modified(t3);
	modified(t4);
	t1.printTrabajador();
	t2.printTrabajador();
	t3.printTrabajador();
	t4.printTrabajador();
}



// La condición de que un trabajador esté libre activa las cuatro primeras reglas (comenzar tareas
// y coger herramientas) sólo cuando hay tareas pendientes. Por lo que esta regla podrá activarse
// únicamente cuando las demás no estén disponibles (no queden tareas por completar) y tras la última 
// ejecución de actualizarTiempo. La condición de que dicho trabajador no se encuentre en el almacen
// la incluimos para evitar un bucle infinito, ya que una vez ejecutada esta regla todos los trabajadores
// terminan su trabajo, dejan sus herramientas y vuelven al almacén.


rule tareasTerminadas {
	declarations
    	practica.objetos.Trabajador t1;
    	practica.objetos.Trabajador t2;
    	practica.objetos.Trabajador t3;
    	practica.objetos.Trabajador t4;
    preconditions
    	!t1.getNombre().equals(t2.getNombre());
  		!t1.getNombre().equals(t3.getNombre());
  		!t1.getNombre().equals(t4.getNombre());
  		!t2.getNombre().equals(t3.getNombre());
  		!t2.getNombre().equals(t4.getNombre());
  		!t3.getNombre().equals(t4.getNombre());
    	t1.getTiempoOcupado() == 0; // por lo menos hay un trabajador libre
    	!t1.getArea().equals("A"); // Tras haber asignado las ultimas tareas no hay ningun trabajador en el almacen
   	actions
   		t1.getHerramienta().setCantidad(t1.getHerramienta().getCantidad() + 1); // Devuelvo las herramientas al almacén
   		t2.getHerramienta().setCantidad(t2.getHerramienta().getCantidad() + 1);
   		t3.getHerramienta().setCantidad(t3.getHerramienta().getCantidad() + 1);
   		t4.getHerramienta().setCantidad(t4.getHerramienta().getCantidad() + 1);
   		modified(t1.getHerramienta());
   		modified(t2.getHerramienta());
   		modified(t3.getHerramienta());
   		modified(t4.getHerramienta());
   		t1.terminarDia(); // les mando al almacén, con herramienta y ocupación nula 
        t2.terminarDia();
        t3.terminarDia();
        t4.terminarDia();
        modified(t1);
        modified(t2);
        modified(t3);
        modified(t4);
  		
} 

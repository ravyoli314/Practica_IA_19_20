// **RECUERDA** PRIORIDAD EN FUNCI�N DEL ORDEN DE LAS REGLAS (LA SUPERIOR LA M�S PRIORITARIA)

// Un bloquecito de estos por cada regla (ejemplos de reglas: cogerHerram, iralAlmacen, moverse...)


rule comenzarTarea{ // por lo menos un trabajador libre CON la herramienta necesaria
	declarations
    practica.objetos.Tarea tarea1;
    practica.objetos.Trabajador t1;
  preconditions
    tarea1.getUnidades() > 0; 		// tarea pendiente 
    t1.getTiempoOcupado() == 0; // trabajador libre
    !t1.getHerramienta().equals(null);
    t1.getHerramienta().getTrabajo().equals(tarea1.getTipo()); 
  actions
 	t1.tiempoTarea(tarea1.getTipo(), tarea1.getUnidades(), t1.getHerramienta().getMejora()); // trabajador ocupado el tiempo que requiera la tarea
 	t1.setArea(tarea1.getArea(), t1.getHerramienta().getPeso()); // le mando al area de la tarea
 	modified(t1); // necesario para que el motor pueda seguir utilizando los objetos modificados
	tarea1.setUnidades(0);
	modified(tarea1);
	t1.printTrabajador2();
}

// LA HERRAMIENTA DEL TRABAJADOR SÓLO ES NULA EN LA PRIMERA ITERACION (LUEGO SOLO HACE INTERCAMBIOS)

rule cogerHerramienta1{ // por lo menos un trabajador libre que tiene que coger otra herramienta para la siguiente tarea
	declarations
    practica.objetos.Tarea tarea1;
    practica.objetos.Trabajador t1;
	practica.objetos.Herramienta h1;
  preconditions
    tarea1.getUnidades() > 0; 		// tarea pendiente 
    h1.getTrabajo().equals(tarea1.getTipo()); // Herramienta acorde con la tarea a realizar
    t1.getTiempoOcupado() == 0; // trabajador libre
    t1.getHerramienta() == null;
    h1.getCantidad() > 0;
  actions
 	t1.cogerHerramienta(h1); // el metodo coger herramienta se encarga de despalzarse al almacen en caso de que este alli
 	h1.setCantidad(h1.getCantidad() -1);
 	modified(t1);
 	modified(h1);
 	t1.printTrabajador2();
}

rule cogerHerramienta2{ // por lo menos un trabajador libre que tiene que coger otra herramienta para la siguiente tarea
	declarations
    practica.objetos.Tarea tarea1;
    practica.objetos.Trabajador t1;
	practica.objetos.Herramienta h1; // tengo en la mano
	practica.objetos.Herramienta h2; // cojo nueva herramienta
  preconditions
    tarea1.getUnidades() > 0; 		// tarea pendiente 
    h2.getTrabajo().equals(tarea1.getTipo()); // Herramienta acorde con la tarea a realizar
    t1.getTiempoOcupado() == 0; // trabajador libre
    !t1.herramientaCorrecta(tarea1.getTipo());
    h1.getNombre().equals(t1.getHerramienta().getNombre());
    h2.getCantidad() > 0;
  actions
 	t1.cogerHerramienta(h2); // el metodo coger herramienta se encarga de despalzarse al almacen en caso de que este alli
 	h1.setCantidad(h1.getCantidad() +1); // devuelvo la herramienta
 	h2.setCantidad(h2.getCantidad() -1); // cojo una nueva
 	modified(t1);
 	modified(h1);
 	t1.printTrabajador2();
}



rule actualizarTiempo{ // cuando están todos ocupados, hace pasar el tiempo del/los que termina primero (dejandolo libre y disminuyendo el tiempo de ocupacion restante de los demas) 
	declarations
    practica.objetos.Trabajador t1;
    practica.objetos.Trabajador t2;
    practica.objetos.Trabajador t3;
    practica.objetos.Trabajador t4;
  preconditions
  	!t1.getNombre().equals(t2.getNombre());
  	!t1.getNombre().equals(t3.getNombre());
  	!t1.getNombre().equals(t4.getNombre());
  	!t2.getNombre().equals(t3.getNombre());
  	!t2.getNombre().equals(t4.getNombre());
  	!t3.getNombre().equals(t4.getNombre());
    t1.getTiempoOcupado() > 0; // TODOS OCUPADOS, hallo el que termina primero (t1)
	t1.getTiempoOcupado() <= t2.getTiempoOcupado();
	t1.getTiempoOcupado() <= t3.getTiempoOcupado();
	t1.getTiempoOcupado() <= t4.getTiempoOcupado();
  actions
 	t2.disminuirTiempoOcupado(t1.getTiempoOcupado());
 	t3.disminuirTiempoOcupado(t1.getTiempoOcupado());
 	t4.disminuirTiempoOcupado(t1.getTiempoOcupado());
 	t1.disminuirTiempoOcupado(t1.getTiempoOcupado());
 	modified(t1);
 	modified(t2);
	modified(t3);
	modified(t4);
	t1.printTrabajador2();
	t2.printTrabajador2();
	t3.printTrabajador2();
	t4.printTrabajador2();
}
 /*
rule tareasTerminadas {
	declarations
    	practica.objetos.Tarea tarea1;
    	practica.objetos.Trabajador t1;
    	practica.objetos.Trabajador t2;
    	practica.objetos.Trabajador t3;
    	practica.objetos.Trabajador t4;
    preconditions
    	!t1.getNombre().equals(t2.getNombre());
  		!t1.getNombre().equals(t3.getNombre());
  		!t1.getNombre().equals(t4.getNombre());
  		!t2.getNombre().equals(t3.getNombre());
  		!t2.getNombre().equals(t4.getNombre());
  		!t3.getNombre().equals(t4.getNombre());
    	tarea1.getUnidades() == 0; // NO quedan tareas pendientes
    	t1.getTiempoOcupado() == 0; // trabajador libre
    	!t1.getArea().equals("A");
   	actions
   		t1.terminarDia();
        t2.terminarDia();
        t3.terminarDia();
        t4.terminarDia();
        modified(t1);
        modified(t2);
        modified(t3);
        modified(t4);
        t1.printTrabajador2();
        t2.printTrabajador2();
        t3.printTrabajador2();
        t4.printTrabajador2();
  		
} 
*/